exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
mdl2 <- glm(visits ~ ., offset=log(visits+1), model=hits)
mdl2 <- glm(visits ~ ., offset=log(visits+1), data=hits)
mdl2 <- glm(simplystats ~ date, family=poisson, offset=log(visits+1), data=hits)
qpois(0.95, mdl2$fitted.values[704])
install.packages('MASS')
library(MASS)
?shuttle
shuttle$use
model <- glm(use ~ wind, shuttle)
model <- glm(use ~ wind, shuttle, family=binary)
?glm
model <- glm(use ~ wind, shuttle, family='binary')
model <- glm(use ~ wind,data= shuttle, family='binary')
model <- glm(use ~ wind,data= shuttle, family=binomial)
summary(model)
-0.25131/-0.03181
n <- -0.25131 *(-0.25131 - 1)
d <- -0.03181 *(-0.03181 - 1)
n/d
exp(-0.25131)
exp(-0.25131)/exp(-0.03181 )
exp(coef(model))
model2 <- glm(use ~ wind + magn, family=binomial, data=shuttle)
summary(model2)
exp(coef(model2))
InsectSprays
model4 <- glm(count ~ spray, family=poisson, data=InsectSprays)
summary(model4)
exp(coef(model4))
exp(2.67415 /  0.05588     )
14.5000000 /(14.5000000 +1.0574713)
exp(coef(model2))
0.6952323/(0.6952323+0.9684981)
0.6952323/(0.6952323+0.9684981+1.0000000 +1.4615736+1.0665323)
exp(coef(model))
0.7777778/(0.7777778 +0.9686888)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
install.packages('lspline')
library(lspline)
model7 <- lm(y ~ lspline(x, c(0)))
summary(model7)
exp(coef(model))
library(MASS)
data(shuttle)
## Make our own variables just for illustration
shuttle$auto <- 1 * (shuttle$use == "auto")
shuttle$headwind <- 1 * (shuttle$wind == "head")
fit <- glm(auto ~ headwind, data = shuttle, family = binomial)
exp(coef(fit))
shuttle$auto <- 1 * (shuttle$use == "auto")
shuttle$headwind <- 1 * (shuttle$wind == "head")
fit <- glm(auto ~ headwind + magn, data = shuttle, family = binomial)
exp(coef(fit))
fit <- glm(count ~ relevel(spray, "B"), data = InsectSprays, family = poisson)
exp(coef(fit))
.4 * 2.5
.25*2.5
fit_all <- lm(mpg ~ ., mtcars)
summary(fit_all)
anova(fit_am, fit_all)
#transmission only model
fit_am <- lm(mpg ~ factor(am), mtcars)
summary(fit_am)
anova(fit_am, fit_all)
library(car)
sqrt(vif(fit_all))
fit3 <- lm(mpg ~ am + carb + drat, mtcars)
summary(fit3)
anova(fit3, fit_all)
summary(fit3)
library(caTools)
set.seed(37)
smp_size <- floor(0.75 * nrow(mtcars))
train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
model <- lm(mpg ~ am + carb + drat, train)
predict(model, test)
test$mpg
prediction <- predict(model, test)
cbind(test, predicion)
cbind(test, prediction)
cbind(test[,mpg], prediction)
test[mpg]
test[,mpg]
test[[mpg]]
cbind(test$mpg, prediction)
model_all <-lm(mpg ~., train)
pred_all <- predict(model_all, test)
cbind(test$mpg, pred_all)
summary(model_all)
summary(model)
prediction
prediction - test$mpg
set.seed(37)
smp_size <- floor(0.63 * nrow(mtcars))
train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
model <- lm(mpg ~ am + carb + drat, train)
prediction <- predict(model, test)
cbind(test$mpg, prediction)
model_all <-lm(mpg ~., train)
pred_all <- predict(model_all, test)
cbind(test$mpg, pred_all)
model_am <- lm(mpg ~ factor(am), train)
pred_am <- predict(model_am, test)
cbind(test$mpg, pred_am)
summary(model_am)
summary(model)
anova(model_am, model)
anova(model, model_all)
predict(fit3, mtcars)
pred3 <- predict(fit3)
pred3
cbind(mtcars$mpg, pred3)
model$residuals
model$effects
model$rank
model$fitted.values
fit3$rank
1/8
source('C:/Users/mfrey/Desktop/Statistical Inference/courses/07_RegressionModels/project/cars.R')
cor(mtcars)
model3 <- lm(mpg ~ factor(am)+carb+factor(vs), mtcars)
#transmission only model
fit_am <- lm(mpg ~ factor(am), mtcars)
factor_cols <- c('vs', 'am')
mtcars[factor_cols] <- lapply(mtcars[factor_cols], factor)
#str(mtcars)
fit_all <- lm(mpg ~ ., mtcars)
anova(model2, model3)
model2 <- lm(mpg ~ factor(am) + carb, mtcars)
anova(model2, model3)
anova(fit_am, fit_all)
anova(fit_am, model3)
anova(model3, fit_all)
summary(model3)
model4 <- lm(mpg ~ factor(am)+carb+factor(vs)+qsec, mtcars)
anova(model3, model4)
summary(model4)
anova(fit_am, model4)
anova(model4, fit_all)
summary(model4)
plot(model3)
library(ggplot2)
m3 <- ggplot(mtcars, aes(x=carb, y=mpg)) + geom_point(aes(color=factor(am)))
print(m3)
plot(mtcars$mpg, model3$fitted.values)
summary(model3)
#plot(fit_am)
#plot(fit_all)
library(car)
sqrt(vif(model3))
sqrt(vif(model2))
sqrt(vif(fit_all))
sqrt(vif(model3))
v <- ggplot(mtcars, aes(x=factor(vs), y=mpg)) + geom_point(aes(color=factor(am)))
print(v)
v <- ggplot(mtcars, aes(x=factor(vs), y=mpg)) + geom_boxplot(aes(color=factor(am)))
print(v)
.7/.8
20*.7
14/22
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages('kernlab')
library(kernlab)
data(spam)
head(spam)
.3*.2
4/5
2/5
log2(5)
(1/5)*log2(5) + (2/5)*log2(5/2)
(log2(5))-((1/5)*log2(5) + (2/5)*log2(5/2))
(2/5)/(3/5)
(log2(5))-((1/5)*log2(5) + (2/5)/(3/5)*log2((3/5)/(2/5)))
3/5
4/5
2/3
1/5 * log2(5) + 2/3*log(3/2)
3/5
4/5
.67/2
(.5*.3)/(.3*.5 + .7*.4)
(1/6*.5)/(.5 *1/6 + .5*1/3)
initial = log2(5)
after = 1/5*log2(5) + 2 * .4 * log2(1/.4)
initial - after
x = c(23, 17, 54, 32, 76, 88, 31, 9, 47, 26)
m = mean(x)
sd?
.
?sd
sigma = sqrt(sum((x - mean(x))^2)/(n))
sigma = sqrt(sum((x - mean(x))^2)/(10))
(23-m)/sigma
(180-155)/20
15^2 +10^2
sqrt(15^2 +10^2)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
AlzhHeimerDisease
AlzheimerDisease
adData = data.frame(predictors)
adData
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
library(ggplot2)
qplot(mixtures$CompressiveStrength)
ggplot2(mixtures, aes(x=CompressivStrength)) + geom_point()
ggplot(mixtures, aes(x=CompressivStrength)) + geom_point()
ggplot(mixtures, aes(x=CompressiveStrength)) + geom_point()
ggplot(mixtures, aes(x=CompressiveStrength, y=index)) + geom_point()
ggplot(mixtures, aes(y=CompressiveStrength)) + geom_point()
ggplot(mixtures, aes(x=as.numeric(row.names(mixtures)).y=CompressiveStrength)) + geom_point()
mixtures$idu <- as.numeric(row.names(mixtures))
ggplot(mixtures, aes(x=idu,y=CompressiveStrength)) + geom_point()
install.packages('Hmisc')
library(Hmisc)
?cut2
colnames(mixtures)
ggplot(mixtures, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=Cement))
str(mixtures)
ggplot(mixtures, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(Cement)))
training$idu <- as.numeric(row.names(training))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(Cement)))
str(training)
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(BlastFurnaceSlag)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(FlyAsh)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(Water)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(Superplasticizer)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(CoarseAggregate )))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(FineAggregate)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(Age)))
ggplot(training, aes(x=idu,y=CompressiveStrength)) + geom_point(aes(color=cut2(FlyAsh )))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log(training$Superplasticizer))
training$Superplasticizer
log(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
X = c(12, 23, 4, 36, 10, 67, 58, 40, 33)
Y = c(1.5, 10, 8.3, 4, 1.4, 1.8, 2.2, 4, 3)
cor(X, Y)
1-.5^2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
colnames(training)
class(colnames(training))
startsWith(colnames(training), 'IL')
training[startsWith(colnames(training), 'IL')]
str(training[startsWith(colnames(training), 'IL')])
train_IL <- training[startsWith(colnames(training), 'IL')]
class(train_IL)
preProc <- preProcess(train_IL, method='pca')
preProc
summary(preProc)
preProc <- preProcess(train_IL, method='pca',thresh = 0.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
train_IL <- training[startsWith(colnames(training), 'IL')]
diagnosis <- training[,1, drop=FALSE]
diagnosis
train_IL
merge(diagnosis, train_IL)
train_diag_IL <- merge(diagnosis, train_IL)
colnames(train_diag_IL)
modelReg <-train(diagnosis ~ ., data=train_diag_IL, method='glm')
modelReg
train_diag_IL[,1:]
train_diag_IL[,-1]
preProc <- preProcess(train_diag_IL[,-1], method='pca', thresh=.8)
train_diag_IL[,1, drop=FALSE]
trainPC <- predict(preProc, train_diag_IL[,1, drop=FALSE])
trainPC <- predict(preProc, train_diag_IL[,1, drop=FALSE])
sqrt(15)
sqrt(1-.82^2)
old_error = sqrt(1-.82^2)
new_sigma = old_error*(8/12.4)
new_sigma
sqrt(1-new_sigma^2)
old_error
new_sigma
qt(.9)
qnorm(.9)
?qnorm
qnorm(.9, lower.tail=F)
qnorm(.95)
qnorm(.995)
upper = (3.4 +25) +2.57(8)
upper = (3.4 +25) +2.55*8
upper
lower = (3.4 +25) - 2.55*8
lower
upper-lower
3885/200
2.57*8
(2.57*8)*2
3885/sqrt(200)
sqrt(133.3)
130000*.33
5300000-5100000
(5300000-5100000)/130000
1250-775
750000/(475*1000)
(36/200)+(34/200)
36/200
838-738
475/0.1411
412/0.1205
0.1411-0.1205
3366.407-3427
-60.593/0.0206
library(caret)
?spacialSign
?spatialSign
?preProcess
24*4000+16*-4900
(24*4000+16*-4900)/200
(38*4000+36*-4900)/200
(38*4000+12*-4900)/200
(36*4000+14*-4900)/200
install.packages('shiny')
install.packages("shiny")
install.packages("shiny")
library(shiny)
1225-650
49000*.25-738
4900*.25-738
library(plotly)
library(tidyr)
library(dplyr)
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
head(state_pop)
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
set.seed(100)
d <- diamonds[sample(nrow(diamonds),1000),]
p <- ggplot(data = d, aes(x=carat, y=price)) +
geom_point(aes(text = paste('Clarity:', clarity)), size = 4) +
geom_smooth(aes(color=cut, fill=cut))+ facet_wrap(~ cut)
print(p)
set.seed(100)
d <- diamonds[sample(nrow(diamonds),1000),]
p <- ggplot(data = d, aes(x=carat, y=price)) +
geom_point(aes(text = paste('Clarity:', clarity)), size = 4) +
geom_smooth(aes(colour=cut, fill=cut))+ facet_wrap(~ cut)
(gg <- ggplotly(p))
gg
plotly_POST(gg)
signup('mfreydlin', 'mfreydlin@gmail.com', save = TRUE)
plotly_POST(gg)
Sys.setenv("plotly_username"="freydlim")
Sys.setenv("plotly_api_key"="••••••••••")
plotly_POST(gg)
?api_create
api_create(gg)
Sys.setenv("plotly_api_key"="CgCgj4lYnKuIYbiltTut")
api_create(gg)
knitr::opts_chunk$set(echo = FALSE)
head(mtcars)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(leaflet)
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
ax[0,1].set_xticks([])
ax[0,1].set_yticks([])
addTiles(leaflet(df))
df %>%
leaflet() %>%
addTiles() %>%
df %>%
leaflet() %>%
addTiles()
df %>%
leaflet() %>%
addTiles() %>%
df %>%
leaflet() %>%
addTiles() %>%
df %>%
leaflet() %>%
addTiles()
df %>%
leaflet() %>%
addTiles()
leaflet(addTiles(df))
leaflet(df) %>% addTiles()
leaflet(df) %>% addTiles()
leaflet(df) %>% addTiles()
addTiles(leaflet(df()))
df(leaflet(addTiles()))
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
setwd("C:/Users/mfrey/Desktop/gitrepos/shiny")
shiny::runApp()
runApp()
runApp()
runApp()
